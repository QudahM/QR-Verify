import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';
import { QRStyle } from '../components/qr-customizer/QRCustomizer';
import { generateCustomQR } from './qrCustomizer';

export const exportQRCode = async (
  qrDataUrl: string,
  qrStyle: QRStyle,
  content: string,
  format: 'png' | 'svg' | 'pdf',
  size: number
): Promise<void> => {
  const filename = `qr-nexus-${Date.now()}`;

  switch (format) {
    case 'png':
      await exportPNG(qrDataUrl, qrStyle, content, size, filename);
      break;
    case 'svg':
      await exportSVG(qrStyle, content, size, filename);
      break;
    case 'pdf':
      await exportPDF(qrDataUrl, size, filename);
      break;
  }
};

const exportPNG = async (
  qrDataUrl: string,
  qrStyle: QRStyle,
  content: string,
  size: number,
  filename: string
): Promise<void> => {
  // Generate high-resolution QR code
  const canvas = document.createElement('canvas');
  canvas.width = size;
  canvas.height = size;
  
  const highResDataUrl = await generateCustomQR(content, qrStyle, canvas);
  
  // Download
  const link = document.createElement('a');
  link.download = `${filename}.png`;
  link.href = highResDataUrl;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

const exportSVG = async (
  qrStyle: QRStyle,
  content: string,
  size: number,
  filename: string
): Promise<void> => {
  // Generate SVG QR code
  const svg = await generateSVGQR(content, qrStyle, size);
  
  // Create blob and download
  const blob = new Blob([svg], { type: 'image/svg+xml' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.download = `${filename}.svg`;
  link.href = url;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
};

const exportPDF = async (
  qrDataUrl: string,
  size: number,
  filename: string
): Promise<void> => {
  const pdf = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4'
  });

  // Calculate dimensions to fit on A4
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const maxSize = Math.min(pageWidth - 40, pageHeight - 40); // 20mm margin on each side
  
  const x = (pageWidth - maxSize) / 2;
  const y = (pageHeight - maxSize) / 2;

  // Add QR code to PDF
  pdf.addImage(qrDataUrl, 'PNG', x, y, maxSize, maxSize);
  
  // Add title
  pdf.setFontSize(16);
  pdf.text('QR Code', pageWidth / 2, 20, { align: 'center' });
  
  // Add generation info
  pdf.setFontSize(10);
  pdf.text(`Generated by QR Nexus - ${new Date().toLocaleDateString()}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
  
  // Save PDF
  pdf.save(`${filename}.pdf`);
};

const generateSVGQR = async (
  content: string,
  qrStyle: QRStyle,
  size: number
): Promise<string> => {
  // This is a simplified SVG generation
  // In a real implementation, you'd want to use a proper QR code to SVG library
  const canvas = document.createElement('canvas');
  const dataUrl = await generateCustomQR(content, qrStyle, canvas);
  
  // Convert canvas to SVG (simplified approach)
  const svg = `
    <svg width="${size}" height="${size}" xmlns="http://www.w3.org/2000/svg">
      <image href="${dataUrl}" width="${size}" height="${size}"/>
    </svg>
  `;
  
  return svg;
};